" #--------------------------------------------------# "
" #------------- NVIM CONFIG FILE -------------------# "
" #--------------------------------------------------# "

set nocompatible

" Vim-Plug {{{
call plug#begin('~/.vim/plugged')

" Plugins...
Plug 'morhetz/gruvbox'
Plug 'AlessandroYorba/Alduin'
Plug 'AlessandroYorba/Arcadia'
Plug 'NLKNguyen/papercolor-theme'

Plug 'junegunn/goyo.vim' " Distraction Free editing
Plug 'mhinz/vim-startify'
Plug 'vim-airline/vim-airline'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ryanoasis/vim-devicons'

Plug 'sheerun/vim-polyglot'
Plug 'plasticboy/vim-markdown'
Plug 'ap/vim-css-color'
Plug 'hail2u/vim-css3-syntax'
Plug 'cakebaker/scss-syntax.vim'
Plug 'elzr/vim-json'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'pangloss/vim-javascript'
Plug 'hdima/python-syntax'
" Plug 'python-mode/python-mode', { 'branch': 'develop' }
Plug 'dag/vim-fish'
Plug 'octol/vim-cpp-enhanced-highlight'

Plug 'vimwiki/vimwiki'
" Plug 'tbabej/taskwiki'
Plug 'mattn/calendar-vim'

Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tmhedberg/matchit'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'ervandew/supertab'
Plug 'jszakmeister/vim-togglecursor'
Plug 'bronson/vim-trailing-whitespace'
Plug 'kien/ctrlp.vim'
Plug 'vim-scripts/a.vim'
Plug 'mileszs/ack.vim'
Plug 'junegunn/fzf.vim'
Plug 'wincent/terminus'
Plug 'machakann/vim-highlightedyank'
Plug 'kshenoy/vim-signature'
" Plug 'yggdroot/indentline'
if has('nvim')
	Plug 'voldikss/vim-floaterm'
endif

Plug 'neovim/nvim-lspconfig'
Plug 'liuchengxu/vista.vim'


Plug '~/.fzf'

" End plugins
call plug#end()

" }}}

" GENERAL {{{

" Syntax
syntax on
filetype plugin on
filetype indent on

" Line numbers
set number
set numberwidth=3

" Use Clipboard
set clipboard=unnamedplus

" Mouse scrolling on
set mouse=a

" Cursor shape and stuff
let g:togglecursor_leave = "underline"

" Tab spacing
" set noexpandtab
set tabstop=2
set shiftwidth=0
set softtabstop=2
" set smarttab

" For Python
autocmd FileType python setlocal tabstop=2 shiftwidth=2 softtabstop=2 noexpandtab

" General improvments
set encoding=UTF-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set undofile

" Searching
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>
" nnoremap <Tab> %
" vnoremap <Tab> %

" Extra symbols
set list
set listchars=tab:▸\ ,eol:¬

" Save on exit
au FocusLost * :wa

" Set up vertical vs block cursor for insert/normal mode
if $TERM == 'screen-256color'
	echo "TERM IS TMUX"
else
	let &t_ti.="\<Esc>[1 q"
	let &t_SI.="\<Esc>[5 q"
	let &t_EI.="\<Esc>[1 q"
	let &t_te.="\<Esc>[0 q"
endif

" Terminal specific
" if $TERM == "myterm-it" || $TERM == "st-256color" || $TERM == "xterm-256color"
" set termguicolors
" else
" let g:gruvbox_termcolors=16
" endif

" }}}

"        KEYBINDINGS {{{
" ========================== leader in coma
let mapleader = ";"
" but keep the old one too
nmap \ ;

" move around the splits with ;j etc.
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>h <C-w>h
nnoremap <leader>l <C-w>l

" move around the splits with Ctrl+Alt+j etc.
nnoremap <C-A-j> <C-w>j
nnoremap <C-A-k> <C-w>k
nnoremap <C-A-h> <C-w>h
nnoremap <C-A-l> <C-w>l
" Note: you may want to change the lock screen combination to Mod4-L...


" move splits up and down
nnoremap <leader>J <C-w>x<C-w>j
nnoremap <leader>K <C-w>k<C-w>x

" open new splits and move there
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>s <C-w>s<C-w>l

" no ex mode (type visual to go back to sanity)
nnoremap Q <Nop>

" Auto opening
inoremap (; (<CR>);<C-c>O
inoremap (, (<CR>),<C-c>O
inoremap {; {<CR>};<C-c>O
inoremap {, {<CR>},<C-c>O
inoremap [; [<CR>];<C-c>O
inoremap [, [<CR>],<C-c>O

" Avoid the escape key
inoremap jj <Esc>
imap <A-e> <Esc>
vmap <A-e> <Esc>
smap <A-e> <Esc>

" EZ Save
nnoremap <A-s> :w<CR>

" Comment quick
nnoremap <A-c> NERDCommenterToggle()<CR>
vnoremap <A-c> NERDCommenterToggle()<CR>

" Header jump
nnoremap <A-a> :A<CR>

" Tab jump
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>

" Open NERD
nnoremap <A-n> :NERDTreeToggle<CR>

" Search
nnoremap <A-f> :Ack!

" FZF
nnoremap <A-k> :Files<CR>
nnoremap <leader>k :Files<CR>
nnoremap <leader>r :Rg<CR>

" Vista
nnoremap <leader>v :Vista!!<CR>

" Close buffers
noremap <silent> <leader>d :bp<bar>sp<bar>bn<bar>bd<CR>

"}}}

" LANGUAGE SERVER {{{

lua << EOF
local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)

end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { 'clangd', 'vimls', 'denols' }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
  }
end
EOF



" }}}

set foldmethod=marker  " explicit markers {{{ and }}}

"        PLUGIN CONFIG {{{
" ===========================

" Colour scheme
let g:alduin_Contract_Vampirism = 1
colorscheme alduin
let g:gruvbox_italic=1
let g:arcadia_Daybreak = 1
" highlight Comment cterm=italic
highlight Folded ctermfg=8 ctermbg=233 guifg=#5f0000 guibg=#121212

" Airline Stuff
let g:airline#extensions#tabline#enabled = 1

" Nerd Tree
map <Leader>n :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Nerd Commenter
let g:NERDSpaceDelims = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDCommentEmptyLines = 1

" Goyo config
map <C-g> :Goyo<CR>

" Vim wiki
map <Leader>wt <Plug>VimwikiNextLink
map <Leader>wrt <Plug>VimwikiPrevLink

let bibliographySummaries = {}
let bibliographySummaries.path = '$HOME/Bibliography/summaries'
let bibliographySummaries.index = 'summaries'

let g:vimwiki_list = [bibliographySummaries]


let g:jsx_ext_required = 0

" Python3 syntax
let g:pymode_python = 'python3'

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

let g:indentLine_char_list = ['|', '¦', '┆', '┊']

" Floating windows...
if has('nvim') && $TERM == 'screen-256color'
	let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"
	let $FZF_DEFAULT_OPTS=' --color=dark --color=fg:15,bg:-1,hl:1,fg+:#ffffff,bg+:0,hl+:1 --color=info:0,prompt:0,pointer:12,marker:4,spinner:11,header:-1 --layout=reverse  --margin=1,4'
	let g:fzf_layout = { 'window': 'call FloatingFZF()' }

	function! FloatingFZF()
		let buf = nvim_create_buf(v:false, v:true)
		call setbufvar(buf, '&signcolumn', 'no')

		" Configuration
		let height = float2nr((&lines - 2) * 0.6)
		let row = float2nr((&lines - height) / 2)
		let width = float2nr(&columns * 0.6)
		let col = float2nr((&columns - width) / 2)

		let opts = {
					\ 'relative': 'editor',
					\ 'row': row,
					\ 'col': col,
					\ 'width': width,
					\ 'height': height,
					\ 'style': 'minimal'
					\ }

		call nvim_open_win(buf, v:true, opts)
	endfunction

	nnoremap <silent> <C-o> :call fzf#vim#files('.', {'options': '--prompt ""'})<CR>
	nnoremap <silent> <leader>b :Buffers<CR>
endif

"}}}
